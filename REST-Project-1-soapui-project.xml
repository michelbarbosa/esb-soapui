<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="18dc8b07-23d1-46c4-8cb9-b58a91d892cb" activeEnvironment="Default" name="REST Project 1" resourceRoot="" soapui-version="5.2.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:restMockService id="e58a7835-3bd3-4b5b-8bfd-47d6ef22a093" port="8081" path="/" host="pc-michel" name="REST MockService 1" docroot=""><con:settings/><con:properties/><con:restMockAction name="teste" method="GET" resourcePath="/teste" id="169e4e15-72b9-497e-8d75-9bde90dec030"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="c57100fb-e293-454a-9e13-14352813d7a5" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "nome": "Jo√£o",
  "idade": 30
}</con:responseContent><con:header><con:name>Content-Type</con:name><con:value>application/json; charset=utf-8</con:value></con:header></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:sensitiveInformation/></con:soapui-project>